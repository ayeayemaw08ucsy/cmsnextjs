{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nconst PORT = process.env.PORT || 8080;\nconst ROOT_URL = process.env.ROOT_URL || `http://localhost:${PORT}`;\nexport default async function sendRequest(api_base_path, options = {}) {\n  const headers = Object.assign({}, options.headers || {}, {\n    'Content-type': 'application/json; charset=UTF-8'\n  });\n  const response = await fetch(`${ROOT_URL}${api_base_path}`, Object.assign({\n    method: 'POST',\n    credentials: 'include'\n  }, options, {\n    headers\n  }));\n  const data = await response.json();\n\n  if (data.error) {\n    throw new Error(data.error);\n  }\n\n  return data;\n}","map":{"version":3,"sources":["/Users/ayeayemaw/Downloads/WK/CMSBoilerplate/lib/api/sendRequest.js"],"names":["fetch","PORT","process","env","ROOT_URL","sendRequest","api_base_path","options","headers","Object","assign","response","method","credentials","data","json","error","Error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;AACA,MAAMG,QAAQ,GAAGF,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAyB,oBAAmBH,IAAK,EAAlE;AAEA,eAAe,eAAeI,WAAf,CAA2BC,aAA3B,EAAyCC,OAAO,GAAG,EAAnD,EAAuD;AAElE,QAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAO,CAACC,OAAR,IAAmB,EAArC,EAAwC;AACpD,oBAAe;AADqC,GAAxC,CAAhB;AAIA,QAAMG,QAAQ,GAAG,MAAMX,KAAK,CACvB,GAAEI,QAAS,GAAEE,aAAc,EADJ,EAExBG,MAAM,CAACC,MAAP,CAAc;AAAEE,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,WAAW,EAAE;AAA/B,GAAd,EAA0DN,OAA1D,EAAmE;AAAEC,IAAAA;AAAF,GAAnE,CAFwB,CAA5B;AAKA,QAAMM,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;;AAEA,MAAGD,IAAI,CAACE,KAAR,EAAe;AACX,UAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACE,KAAf,CAAN;AACH;;AAED,SAAOF,IAAP;AACH","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\nconst PORT = process.env.PORT || 8080;\nconst ROOT_URL = process.env.ROOT_URL || `http://localhost:${PORT}`;\n\nexport default async function sendRequest(api_base_path,options = {}) {\n\n    const headers = Object.assign({}, options.headers || {},{\n        'Content-type':'application/json; charset=UTF-8',\n    });\n\n    const response = await fetch(\n        `${ROOT_URL}${api_base_path}`,\n        Object.assign({ method: 'POST', credentials: 'include' }, options, { headers }),\n    );\n\n    const data = await response.json();\n\n    if(data.error) {\n        throw new Error(data.error);\n    }\n\n    return data;\n}"]},"metadata":{},"sourceType":"module"}